
 _   _      _                      _      ____  _____ 
| \ | | ___| |___      _____  _ __| | __ |___ \|___ / 
|  \| |/ _ \ __\ \ /\ / / _ \| '__| |/ /   __) | |_ \ 
| |\  |  __/ |_ \ V  V / (_) | |  |   <   / __/ ___) |
|_| \_|\___|\__| \_/\_/ \___/|_|  |_|\_\ |_____|____/ 
																											

Network 23 ~ "Beta to the Max!"

 _________________________________
/\                                \
\_| --y'know what? There's only   |
	| four things we do better than |
	| anyone else:                  |
	|                               |
	|   music                       |
	|   movies                      |
	|   microcode (software)        |
	|   high-speed pizza delivery   |
	|   ____________________________|_
	 \_/______________________________/

some notes building the megamultimedia empire:
										 _                         _           _   
	___ _ __ ___  __ _| |_ ___   _ __  _ __ ___ (_) ___  ___| |_ 
 / __| '__/ _ \/ _` | __/ _ \ | '_ \| '__/ _ \| |/ _ \/ __| __|
| (__| | |  __/ (_| | ||  __/ | |_) | | | (_) | |  __/ (__| |_ 
 \___|_|  \___|\__,_|\__\___| | .__/|_|  \___// |\___|\___|\__|
															|_|           |__/               

== install aws cli

npm's aws-cli is deprecated as of 6 years ago
it seems most people install aws-cli with python
https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
amazon docs say for windows install that msi

$ aws --version
aws-cli/2.16.4 Python/3.11.8 Windows/10 exe/AMD64

== give aws cli access to your aws account

$ aws configure

AWS Access Key ID [None]: YOUR_ACCESS_KEY_ID
AWS Secret Access Key [None]: YOUR_SECRET_ACCESS_KEY
Default region name [None]: us-east-1
Default output format [None]: json

dashboards at aws.amazon.com
iam dashboard
click the number of users
create user
net23dev2, example name
attach policies directly
check AdministratorAccess, second one
create user

click new user
access key 1, create access key
use case, command line interface, check understand reccomendation, next
no description, create access key

secret access key only shows once, paste it right into bash

$ aws sts get-caller-identity
$ aws s3 ls

confirm you're in, and list your buckets

== install serverless framework

https://www.serverless.com/

$ npm install -g serverless
$ serverless --version

== setup repository on github

made repo on github with node defaults
$ git clone https://github.com/zootella/net23

$ cd net23
move aside .gitignore as serverless create will also make one
$ serverless create --template aws-nodejs --path .

$ npm init
$ npm install -S aws-sdk

amazon access is configured, but make .env to mirror non-amazon secrets the lambdas will use
$ touch .env
and make sure .gitignore lists it
		 _                       _                                    
	__| | ___  _ __ ___   __ _(_)_ __    _ __   __ _ _ __ ___   ___ 
 / _` |/ _ \| '_ ` _ \ / _` | | '_ \  | '_ \ / _` | '_ ` _ \ / _ \
| (_| | (_) | | | | | | (_| | | | | | | | | | (_| | | | | | |  __/
 \__,_|\___/|_| |_| |_|\__,_|_|_| |_| |_| |_|\__,_|_| |_| |_|\___|
																																	

== domain name

registered net23.cc at a third party registrar

aws web console, route53 dashboard, hosted zones, create hosted zone
net23.cc, domain name
public already selected, create hosted zone
leads to page for new hosted zone, titled net23.cc, with two records
the NS record shows the name servers amazon has picked for us:

ns-1619.awsdns-10.co.uk.
ns-1281.awsdns-32.org.
ns-682.awsdns-21.net.
ns-211.awsdns-26.com.

go back to the registrar to put those in
nameservers, basic dns, changing that to custom dns
entering the four name servers above, *without* the periods at the ends

dnspropegation happens pretty quick, then check with nslookup

$ nslookup net23.cc
$ nslookup net23.cc 8.8.8.8
$ nslookup -type=NS net23.cc

first two won't work yet because you haven't made any A records
the 8s uses google's dns to check, rather than whatever is local

== ssl certificate

acm, list certificates, request
request a public certificate
add another name to this certificate to get two boxes, then enter
net23.cc
*.net23.cc
defaults of dns validation, rsa2048, request

at this point you can get the ARN
and status is pending validation

there's a button create records in route53
follow that flow, it'll make a cname record
in route53 you can see it made the record
still pending, taking a few minutes, then issued, green check

then put the ARN in .env and run the script:

$ serverless deploy

											_ _ 
	___ _ __ ___   __ _(_) |
 / _ \ '_ ` _ \ / _` | | |
|  __/ | | | | | (_| | | |
 \___|_| |_| |_|\__,_|_|_|
													

== email

goals and steps:
[x]review how you setup email forwarding already in your personal cloudflare account
[x]setup forwarding so support@cold3.cc forwards to another domain
[x]configure noreply@cold3.cc to correctly bounce or kill email
[x]configure DKIM and SPF for maximum security and correctness
[]get a lambda at api.net23.cc to send email from noreply@cold3.cc on surface and deep in headers

cloudflare dashboard for previous example domain, where you setup pages and email forwarding
websites, example.com
back on the left, dns, records
seeing these records as a result of setting up pages and email forwarding:

AAAA   www          100::                                         Proxied
CNAME  example.com  example-com.pages.dev                         Proxied
MX     example.com  route3.mx.cloudflare.net                      DNS only
MX     example.com  route2.mx.cloudflare.net                      DNS only
MX     example.com  route1.mx.cloudflare.net                      DNS only
TXT    example.com  "v=spf1 include:_spf.mx.cloudflare.net ~all"  DNS only

back on the left, email
configuration summary, custom addresses, 2 dns records, routing status enabled, email dns records configured

cloudflare dashboard for cold3.cc, where so far you've setup pages and workers but no email yet
websites, cold3.cc
back on the left, dns, records
there are only two:

AAAA   www       100::            Proxied
CNAME  cold3.cc  cold3.pages.dev  Proxied

back on the left, email, just a link to this documentation:
https://developers.cloudflare.com/email-routing/
and a big blue get started button, clicking it

breadcrumbs are
1 Create a custom address
2 Verify destination address
3 Configure your DNS

you're goign to set these two up now:

k----@cold3.cc   -> ke---@efa--.ll-
support@cold3.cc -> support@efa--.ll-

on the first one, step 2 is they send you an email link
and step 3 is they show you the extra dns records they'll add
then to add the second forwarding address click
email, email routing, routing rules, custom addresses, create address

you see how you can create an alias that drops emails, and will set that up now, as well
cloudflare dashboard, cold3.cc, email, email routing, routing rules, custom addresses, create address
custom address, noreply@cold3.cc
action, Drop

now the routing rules tab has a table with the three custom addresses
you can turn them on and off individually there, too
also, going back to dns, records, you can see the original AAAA and CNAME records
and the new MX and TXT ones that configuring email routing created

(...next, you leave the cloudflare dashboard and head over to aws)

remember, you have setup your domain ef---.ll- at namecheap and squarespace
aws has never heard of it outside of the pinpoint verification you just completed
you have working email forwarding like support@ef---.ll-
the domain you've setup at aws, net23.cc, the user should never see, not even in headers
and considering all this, your goal:
"a lambda at api.net23.cc can send an email from noreply@ef---.ll-"
should be possible

											_ _     ____  
	___ _ __ ___   __ _(_) |   |___ \ 
 / _ \ '_ ` _ \ / _` | | |     __) |
|  __/ | | | | | (_| | | |_   / __/ 
 \___|_| |_| |_|\__,_|_|_( ) |_____|
												 |/         

you started down the breadcrumbs with cold3.cc, but then read this on step 2:
"By adding your domain to Amazon SES it also allows your recipients to know that the emails coming from you. For your initial domain, we recommend verifying a domain that loads a webpage with identifiable information about your organization."
so, you need to use ef---.ll- not cold3.cc

aws dashboard labyrinth, ses homepage, get started button

here are the breadcrumbs:
Step 1 Add your email address
Step 2 Add your sending domain
Step 3 - optional Add MAIL FROM domain
Step 4 Review and get started with SES

Step 1

Add your email address, To get started with Amazon SES you must provide an email address so that we can send you a verification link. This verification process shows us you're the owner of the email address., A verification email will be sent to you at this address.

support@ef---.ll-

Step 2

Add your sending domain; A domain identity usually matches your website or business name. Amazon SES needs to be linked to your domain and verified in order to send emails to your recipients through SES. By adding your domain to Amazon SES it also allows your recipients to know that the emails coming from you. For your initial domain, we recommend verifying a domain that loads a webpage with identifiable information about your organization; To verify ownership of a domain, you must have access to its DNS settings to add the necessary records.

ef---.ll-

Step 3

Add MAIL FROM domain - optional; Configuring a custom MAIL FROM domain for messages sent from this identity enables the MAIL FROM address to align with the From address. Domain alignment must be achieved in order to be DMARC compliant; The MAIL FROM domain refers to the domain that appears in the 'From' field of an email message and is recommended for better deliverability, reputation management, and branding purposes. The MAIL FROM domain must be a subdomain of the verified identity from which youâ€™re sending.

mail.ef---.ll-

Behavior on MX failure; Choose which action Amazon SES should take if your MAIL FROM domain's MX (Mail Exchange) record is not set up correctly

(x) Use default MAIL FROM domain; Will use a subdomain of amazonses.com instead of your custom MAIL FROM domain.
( ) Reject message; Will automatically reject the message without sending it.

Done

You are in Sandbox; In a sandbox environment, you can use all of the features offered by Amazon SES; however, certain sending limits and restrictions apply. When you're ready to move out of the sandbox, submit a request for production access. Before you submit a request for production access you must complete the tasks below.
[]Verify email address; To verify ownership of this email, check your inbox for a verification request email and click the link provided.
[]Send test email (Optional but recommended); Amazon SES mailbox simulator lets you test how your application handles different email sending scenarios.
[]Verify sending domain; Click on the button below and add the generated CNAME records to your domain's DNS provider.

Get DNS Records

there's a csv file to download with 3 CNAME, 2 TXT, and a MX record
going to namecheap to add them
already in namecheap are dns records for squarespace, and google workspace

(notes)

chatgpt suggested "mail" as the subdomain name
and explained there are four things i should configure here:
chat suggested dns records, as well, all of which are covered by amazon's instructions
SPF (Sender Policy Framework) Ensures AWS SES is authorized to send emails on behalf of your domain.
DKIM (DomainKeys Identified Mail) Adds email authentication to prevent spoofing.
DMARC (Domain-based Message Authentication, Reporting & Conformance) Helps manage and report on email authentication.
MAIL FROM Domain. Aligns the MAIL FROM domain with your From address for DMARC compliance and improved deliverability.

											_ _     _____ 
	___ _ __ ___   __ _(_) |   |___ / 
 / _ \ '_ ` _ \ / _` | | |     |_ \ 
|  __/ | | | | | (_| | | |_   ___) |
 \___|_| |_| |_|\__,_|_|_( ) |____/ 
												 |/         

2024jul3 going hard on dns for ef---.ll- to setup a net23 lambda that sends a message from ef---.ll-
first, some dns settings that are true:

amazon says, add these records to the dns for ef---.ll-:

CNAME  lzbihthz6dhrqvobiijpla77a4zfd5mo._domainkey.ef---.ll-  lzbihthz6dhrqvobiijpla77a4zfd5mo.dkim.amazonses.com
CNAME  ruhjtsmevec56krss4pvkw6b5kwalsmy._domainkey.ef---.ll-  ruhjtsmevec56krss4pvkw6b5kwalsmy.dkim.amazonses.com
CNAME  xhea6vwl7aw62ocquwlrerepecsrl6da._domainkey.ef---.ll-  xhea6vwl7aw62ocquwlrerepecsrl6da.dkim.amazonses.com
MX     mail.ef---.ll-                                         10 feedback-smtp.us-east-1.amazonses.com
TXT    mail.ef---.ll-                                         "v=spf1 include:amazonses.com ~all"
TXT    _dmarc.ef---.ll-                                       "v=DMARC1; p=none;"

remember that at this point, ef---.ll- is a squarespace with email through google workspace
namecheap says, these records are already current on ef---.ll-:

A      @                     198.185.159.144
A      @                     198.185.159.145
A      @                     198.49.23.144
A      @                     198.49.23.145
CNAME  www                   ext-cust.squarespace.com.
CNAME  3xwzwwzn2sx39xjmdp8w  verify.squarespace.com.

and doesn't show you the gmail ones, those they provide automatically
nslookup says, these are the current mx records for ef---.ll-:

MX  ef---.ll-  preference = 10, mail exchanger = aspmx3.googlemail.com
MX  ef---.ll-  preference = 5, mail exchanger = alt1.aspmx.l.google.com
MX  ef---.ll-  preference = 5, mail exchanger = alt2.aspmx.l.google.com
MX  ef---.ll-  preference = 1, mail exchanger = aspmx.l.google.com
MX  ef---.ll-  preference = 10, mail exchanger = aspmx2.googlemail.com

by the way, here are cloudflare's current dns records for cold3.cc:

AAAA   www       100::
CNAME  cold3.cc  cold3.pages.dev
MX     cold3.cc  route3.mx.cloudflare.net
MX     cold3.cc  route2.mx.cloudflare.net
MX     cold3.cc  route1.mx.cloudflare.net
TXT    cold3.cc  "v=spf1 include:_spf.mx.cloudflare.net ~all"

options for how to get this all combined:
(option 1) keep your dns at namecheap. less of a change, but more cowboy. website should stay up, but gmail could go down
(option 2) move dns to cloudflare. closer to eventual finish, squarespace could go down, saves $7/month on gmail
also, chatgpt says the mx records won't conflict because the amazon one is mail.ef---.ll- and the google ones are ef---.ll-
you're also noticing a txt record about spf1, but hopefully the mail.ef---.ll- and ef---.ll- will keep those from conflicting, too

you're picking option 2, if the squarespace goes down nobody's looking at it right now, less cowboy, closer to finish

steps for option 2:
[x]manually forward email you want from k----@ef---.ll- gmail to ef---ll-@gmail.com before you break squarespace google workspace
[x]namecheap stays the registrar, but move DNS from namecheap to cloudflare, like you did for cold3.cc
[x]get squarespace working again, first just put in the same records as before
[x]setup email routing in cloudflare, follow steps you just followed for cold3.cc for k----@, support@, noreply@
[x]add amazon records and complete domain verification on the ses dashboard
[x]apply to be let out of the sandbox

official steps above, some more notes within steps:
web records that point to squarespace will hopefully stay the same
intentonally break squarespace google workspace, unsignup to save $7/month, delete chrome profile
setup email routing in cloudflare, everything goes to ef---ll-@gmail.com

== 2024jul4 move ef---.ll- dns from namecheap to cloudflare

manually forwarded email from k----@ef---.ll- to ef---ll-@gmail.com
in squarespace, cancelled google workspace

cloudflare ef---ll- dashboard
websites, lists coldstart.cc, cold2.cc, cold3.cc
big blue button, add a site

link to documentation: https://developers.cloudflare.com/learning-paths/get-started
"This process sets up your web traffic to proxy through Cloudflare. Proxying speeds up and protects websites and services served by this domain."
https://developers.cloudflare.com/fundamentals/concepts/how-cloudflare-works
"If the domainâ€™s status is active and the queried DNS record is set to proxied, then Cloudflare responds with an anycast IP address, instead of the value defined in your DNS table. This effectively re-routes the HTTP/HTTPS requests to the Cloudflare network, instead of directly reaching the targeted the origin server.
"In contrast, if the queried DNS record is set to DNS only, meaning the proxy is off, then Cloudflare responds with the value defined in your DNS table (that is, an IP address or CNAME record). This means HTTP/HTTPS requests route directly to the origin server and are not processed or protected by Cloudflare."
cold3.cc dashboards show DNS setup: full, and Proxied on

ef---.ll-, free plan
cloudflare says it's bringing in existing dns records, and it found
4 A, 1 CNAME, 5 MX
shoulda found 2 cname, but whatever

cloudflare says "Avoid DNS resolution issues caused by DNSSEC; Find the DNSSEC setting at your registrar (per-provider instructions). If it is on, you have two options: Turn DNSSEC off at least 24 hours before updating your nameservers. Most common; Migrate your existing DNS zone without turning off DNSSEC. More advanced; After your domain activates, we recommend turning DNSSEC on through Cloudflare."
namecheap dashboard, dnssec is off
is dnssec on for cold3.cc? no! you found the start of the flow in cloudflare, websites, cold3.cc, dns, settings, first box is dnssec
https://developers.cloudflare.com/dns/dnssec/
TODO add dnssec to cold3.cc as practice and then ever.fans as production, following steps in cloudflare and namecheap

namecheap, ef---.ll-, before changes:
nameservers is set to Namecheap BasicDNS
advanced dns tab shows the records above, the 4 A records and CNAME
dnssec is off
mail settings is Gmail, text says Gmail automatically configured for ef---.ll-

switching from Namecheap Basic DNS to Custom DNS
entering the nameservers from cloudflare:

carl.ns.cloudflare.com
maya.ns.cloudflare.com

2024jul4 1:13p finished flow on cloudflare, which says "Cloudflare is now checking the nameservers for ef---.ll-. Please wait a few hours for an update."
1:23p "Great news! Cloudflare is now protecting your site; Data about your site's usage will be here once available."
dnschecker.org also shows maya and carl for ef---.ll-, just like cold3.cc
your website site is down, ssl mismatch

cloudflare dashboard, quick start guide
automatic https rewrites, yes
always use https, yes

cloudflare dns records
4 A are correct
only one CNAME, [x]add the second
5 MX records all about gmail, [x]remove them, so now they again look like this:

A      @                     198.185.159.144
A      @                     198.185.159.145
A      @                     198.49.23.144
A      @                     198.49.23.145
CNAME  www                   ext-cust.squarespace.com
CNAME  3xwzwwzn2sx39xjmdp8w  verify.squarespace.com

you pasted a trailing period when adding the verify cname, but cloudflare isn't showing it

sqarespace dashboards, red text and boxes that says "DNS Error, We couldn't verify DNS settings with Namecheap."
and then they have a table of right and wrong settings, but it changes every time you refresh
cloudflare dashboard, ef---.ll-, dns records, turned proxy off on all records
at squarespace, refresh still is crazy
changed nothing, refreshed site, ef---.ll- is back online, ssl looks ok
squarespace dashboard, settings, domains and email, domains managed by third-party, ef---.ll-, red message changed to green Connected

interestingly(?) in firefox it's really easy to see who issued the certificate, and right now it shows
net23.cc: Verified by: Amazon (makes sense, as this ssl came from AWS ACM)
cold3.cc: Verified by: Google Trust Services (this is cloudflare pages and workers)
ef---.ll-: Verified by: Let's Encrypt (this is cloudflare dns, squarespace hosting, no idea where the ssl came from)

ok, on to setting up email forwarding
cloudflare dashboard, ef---.ll-, email, email routing, get started
destination already verified, so that step is faster

k----@ef---.ll-   -> ef---ll-@gmail.com
support@ef---.ll- -> ef---ll-@gmail.com
noreply@ef---.ll- -> Drop

all the tests worked, except nothere@ef---.ll- didn't bounce, but whatever

now at last you go back to the amazon steps
you configured aws at mail.ef---.ll-
you think later you can configure twilio at mail2.ef---.ll-, TODO

aws dashboard, ses
yellow note saying im in the sandbox
verify sending domain, get dns records, download record set, got a csv file:

CNAME  lzbihthz6dhrqvobiijpla77a4zfd5mo._domainkey.ef---.ll-  lzbihthz6dhrqvobiijpla77a4zfd5mo.dkim.amazonses.com
CNAME  ruhjtsmevec56krss4pvkw6b5kwalsmy._domainkey.ef---.ll-  ruhjtsmevec56krss4pvkw6b5kwalsmy.dkim.amazonses.com
CNAME  xhea6vwl7aw62ocquwlrerepecsrl6da._domainkey.ef---.ll-  xhea6vwl7aw62ocquwlrerepecsrl6da.dkim.amazonses.com
MX     mail.ef---.ll-                                         10 feedback-smtp.us-east-1.amazonses.com
TXT    mail.ef---.ll-                                         "v=spf1 include:amazonses.com ~all"
TXT    _dmarc.ef---.ll-                                       "v=DMARC1; p=none;"

left proxying on entering the first cname, and got an error that says it can't be proxied

entering the mx record, there's a box that says, Priority (required)
you're going to enter just feedback-smtp.us-east-1.amazonses.com as the value, and separately dial in priority 10
also, you entered the name "mail.ef---.ll-" but cloudflare is showing it as just "mail"

for the txt record, cloudflare gives you a larger box, you're pasting in as above including the quotes
it saves with the quotes

ok, they're all in there, a mix of records about squarespace, about cloudflare email forwards, and about ses
only some things are proxyable, but you've turned off proxying on all of them

amazon doesn't have a check now button, rather it says
"Identity status: Verification pending; Last checked: July 4, 2024 at 14:21 (UTC-04:00)" and it's 14:56
you might have gotten the records with that button, and then not set them quick enough for the first check
15:02 without refresh, looking back at the page, green checkmark Verified

last of three boxes on ses page is to send test email, so let's see what's in there
"Send test email Info; The Amazon SES mailbox simulator lets you test how your application handles different email sending scenarios."
from is already set to support@ef---.ll-
there's no to box, it looks like messages go to your choice of options like success@simulator.amazonses.com
there is a cc box, so let's try that? ef---ll-@outlook.com
doesn't like it because not a verified identity

aws dashboards, ses, configuration, identities
already there are two listed, both green verified:

ef---.ll-, Domain
support@ef---.ll-, Email address

so you need to [x]turn noreply into a forward, [x]verify it, then [x]turn it back into a drop target
this is easy to do you just edit the existing row
verified that one, and also ef---ll-@outlook.com
and sent a test email. now the box in the ses dashboard says green check test email sent, but you haven't gotten it in outlook yet, but whatever

aws dashboard, ses, get set up
box on the top, you're still in the sandbox (but now the boxes below are all green), button request production access

== filled out the aws ses form to request production access

To help us evaluate your request for production access, fill out the following form outlining how you plan to use Amazon SES to send email once your account has moved out of the sandbox; Production access means you can send email to any recipient, regardless of whether the recipient's address or domain is verified. However, you must still verify all identities that you use as "From", "Source", "Sender", or "Return-Path" addresses.
https://docs.aws.amazon.com/ses/latest/dg/request-production-access.html
and they say approval takes just 24 hours, which is great

Mail type; Choose the option that best represents the types of messages you plan on sending. A marketing email promotes your products and services, while a transactional email is an immediate, trigger-based communication.

Transactional

Website URL; Provide the URL for your website to help us better understand the kind of content you plan on sending.

https://www.ef---.ll-/

Use case description: Explain how you plan to use Amazon SES to send email. Specifically, tell us:
-How do you plan to build or acquire your mailing list?
-How do you plan to handle bounces and complaints?
-How can recipients opt out of receiving email from you?

next day, approved: "Thank you for submitting your request to increase your sending limits. Your new sending quota is 50,000 messages per day. Your maximum send rate is now 14 messages per second. We have also moved your account out of the Amazon SES sandbox." huzzah. with great power comes great responsibility. and Network 23 will use it wisely

											_ _     _  _   
	___ _ __ ___   __ _(_) |   | || |  
 / _ \ '_ ` _ \ / _` | | |   | || |_ 
|  __/ | | | | | (_| | | |_  |__   _|
 \___|_| |_| |_|\__,_|_|_( )    |_|  
												 |/          

[]make a hello world lambda
[]make lambdas that send sms and email
[]secure them so only cold3.cc can call them















	 _                          _                 
	(_)___  __   _____ _ __ ___(_) ___  _ __  ___ 
	| / __| \ \ / / _ \ '__/ __| |/ _ \| '_ \/ __|
	| \__ \  \ V /  __/ |  \__ \ | (_) | | | \__ \
 _/ |___/   \_/ \___|_|  |___/_|\___/|_| |_|___/
|__/                                            

coding with big int literals, nuxt freaked out
it seems like it was building everything to es2019, and those are es2020
also, soon you're going to start using library functions from lambdas, which are node
so it's time to figure out what javascript version you want, and set it explicitly

here's what amazon supports for lambda right now, 2024jul:
https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html
Node.js 20, current
Node.js 18, current
Node.js 16, deprecation date 2024jun12
so from that, picking Node 20

you just updated node and npm on your development workstation:
$ node --version, 20.15.0
$ npm --version, 10.8.1
so that matches well

it seems there isn't a good way to match a node version to an esXXXX version
because platform vendors, like google making v8, implement different features from the spec at different times
this page is detailed, but useless:
https://v8.dev/features

so what version is cloudflare workers running?
https://developers.cloudflare.com/workers/runtime-apis/web-standards/
"The Workers runtime is updated at least once a week, to at least the version of V8 that is currently used by Google Chromeâ€™s stable release. This means you can safely use the latest JavaScript features, with no need for transpilers."
ok, so that means way more recent than 2019 or 2020

$ nuxt build was the simplest command to hit the big int literal error:

	Kevin@ncom3 MINGW64 /.../repot1 (main)
	$ npm run build
	> nuxt build
	Nuxt 3.12.3 with Nitro 2.9.7
	i Building client...

	[nitro]  ERROR  Error: Transform failed with 2 errors:
	C:\Documents\code\code21site\repot1\server\api\myapi.ts:12:8: ERROR: Big integer literals are not available in the configured target environment ("es2019")

(as an aside: this doesn't really make sense because even if it is targeting es2019, shouldn't transplation correctly turn my big int literals into something that es2019 can understand? isn't that the whole point of transplilation?)
this configuration addition fixes it, in /nuxt.config.txt

	export default defineNuxtConfig({
		compatibilityDate: '2024-04-03',
		devtools: { enabled: true },
		nitro: {
			preset: "cloudflare-pages",
			esbuild: { options: { target: 'esnext' } }// <-- new line that fixes big int literal error
		},
		modules: ["nitro-cloudflare-dev"],
	})

so that's cool. "es2020" also fixes it, but you're using "esnext", because:
2020 was still four years ago,
es2023 and es2024 might not be real yet, and
esnext is also a good match for cloudflare's "what's our version? current!" thing



(bookmark)
then add more here about versioning net23 lambdas with babel transpilation to node20








                     _       _           
 _ __ ___   ___   __| |_   _| | ___  ___ 
| '_ ` _ \ / _ \ / _` | | | | |/ _ \/ __|
| | | | | | (_) | (_| | |_| | |  __/\__ \
|_| |_| |_|\___/ \__,_|\__,_|_|\___||___/
                                         

first, you want wrangler and serverless installed locally, not globally
commands to install, version, and uninstall globally:
$ npm install -g wrangler
$ npm list -g wrangler
$ npm uninstall -g wrangler
serverless 4.0.35 was installed globally, uninstalled that to install serverless 3 in project

commands to build up net23 package.json
note that you have to install serverless version 3, as current is 4 but even serverless-webpack, which has 235k weekly downloads, isn't ready for serverless 4
all of these modules are plenty popular, except perhaps for serverless-s3-sync
installing in this order, two of them were already there, but still installing to list in package.json

$ npm install -S aws-sdk                      8 million weekly downloads, added 37 packages

$ npm install -D serverless@3                 1 million, 550 packages

$ npm install -D babel-loader                15 million, 122 packages
$ npm install -D @babel/core                 45 million, this one is already there!
$ npm install -D @babel/preset-env           22 million, 112 packages

$ npm install -D webpack                     24 million, this one is already there!
$ npm install -D webpack-cli                  6 million, 32 packages

$ npm install -D serverless-webpack         235 thousand, 52 packages
$ npm install -D serverless-offline         519 thousand, 85 packages
$ npm install -D serverless-domain-manager  220 thousand, 62 packages
$ npm install -D serverless-s3-sync          32 thousand,  9 packages

as an aside, "$ serverless deploy" works, but doesn't notice changed files in www
you added a script to package.json so "$ npm run www" force syncs everything




(bookmark)
next three scopes:
1 hello world lambda, no custom domain, no webpack
2 lambdas as api.net23.cc
3 webpack and babel
try running local and deployed
can you see the bundle size before and after?
make an api endpoint to run tests, should be fine because local node 20 works great






 _          _ _         _                 _         _       
| |__   ___| | | ___   | | __ _ _ __ ___ | |__   __| | __ _ 
| '_ \ / _ \ | |/ _ \  | |/ _` | '_ ` _ \| '_ \ / _` |/ _` |
| | | |  __/ | | (_) | | | (_| | | | | | | |_) | (_| | (_| |
|_| |_|\___|_|_|\___/  |_|\__,_|_| |_| |_|_.__/ \__,_|\__,_|
                                                            

# lambda step 1: hello world and local development

notes getting started with lambda
$ npm run local
runs serverless offline, which emulates AWS Lambda and API Gateway
then you can hit your APIs at urls like:
http://localhost:3000/prod/hello1
http://localhost:3000/prod/hello2
live updates don't seem to work, but maybe that's not an intended feature

$ npm run deploy
first time, right now with two lambdas that aren't using a custom domain

# lambda step 2: manual steps to get custom domain

serverless.yml should be able to create api.net23.cc, but you're getting this error:
$ npm run deploy
Deploying net23 to stage prod (us-east-1)
Warning: V1 - 'api.net23.cc' does not exist.
Error: V1 - Make sure the 'api.net23.cc' exists.

aws dashboard, route 53, net23.cc, you see stuff for the root and www, but nothing yet for api.net23.cc
aws dashboard, api gateway, apis, there is a listing named prod-net23, and clicking into it you do see hello1 and hello2

ok, instead of trying to get this one-time configuration to be created by serverless.yml,
you're going to document steps here to set it up manually:

aws dashboard, api gateway, custom domain names
api.net23.cc
tls 1.2
regional (not edge optimized)
net23.cc, choose ACM certificate from drop down, only one there
create domain name button, green success banner

aws dashboard, api gateway, custom domain names, api.net23.cc
configurations, endpoint configuration, api gateway domain name
copy this as you'll paste it into route53 in a moment

aws dashboard, api gateway, custom domain names, api.net23.cc
api mappings, second tab
configure api mappings, add new mapping
api dropdown, one thing listed, what was created by serverless, prod-net23 (REST)
prod, stage, only option
path (optional), leave blank because you want root
save

aws dashboard, route53, hosted zones, net23.cc, create record
api, record name
A, record type, already set to this
switch on Alias
Route traffic to, dropdown with lots of options, Alias to API Gateway API
us-east-1, N. Virginia, region
choose endpoint, dropdown with one item, suggests the domain like blah.execute-api.us-east-1.amazonaws.com we just created
simple routing policy, yes evaluate target heath, leaving these defaults
create records

back in route23 for net23.cc, all your dns records from before are there, along with the new one for api.net23.cc
and it looks like it's directing to, and saying, the under-the-hood domain like:
blahblah.execute-api.us-east-1.amazonaws.com

# lambda step 3: turn off side door access, hard or impossible and gave up

related to the checks below, there's the www | root X http | https checks
the api subdomain means we don't have to worry about www | root here, which is by design
checking http, chrome takes a long time and then reports connection refused
firefox takes a long time, and then redirects to https
so all that looks ok for now

https://api.net23.cc/hello1 ~ works, correctly
https://jkXXXXXXo3.execute-api.us-east-1.amazonaws.com/prod/hello1 ~ works, wrongly, id from api gateway
https://d-1hXXXXXXyh.execute-api.us-east-1.amazonaws.com/prod/hello1 ~ blocked, correctly, value from route53

as always with aws, there are manual steps or you can try automatic
manual steps involve pasting in code
automatic steps involve a secret that includes your aws account number

as both include blocks of json, trying infrastructure as code
added ACCESS_API_GATEWAY_RESOURCE_ARN to .env and section that uses it to serverless.yml

before running, checked the dashboard:
aws dashboard, api gateway, prod-net23
halfway down on the left, resource policy
starting out seeing policy details, no resource policy

ok, spent a few hours going in circles with chatgpt trying to turn off the side door
chat repeatedly went to controlling who can call the function, not where the function is callable
using the referer header, which of course can be spoofed anyway
then got it to explain that aws doesn't have a way to turn off access at the amazonaws.com domain
"Unfortunately, AWS does not provide a direct option to completely disable the default amazonaws.com endpoint for API Gateway. ... Although you cannot completely disable the default domain, you can create a Lambda@Edge function or use API Gatewayâ€™s HTTP integration to redirect any traffic from the default domain to your custom domain."
so that's way too much work and complexity for this that likely doesn't even matter, giving up

# lambda step 4: let in webpack and babel to reduce bundle size and use modules

$ npm run pack
$ npm run deploy

pack just runs webpack, building to dist/hello1.js
deploy does that as part of the serverless framework upload to aws lambda
before adding webpack, each hello was 7.1 MB; now serverless framework says it's 157 bytes
on disk from pack its 494 bytes, though, but whatever

also, deploy seems to delete the dist folder!
it's there after pack, gone after deploy

fought an error about ES6 module syntax or not in the webpack configuration
generally, trying to pick ES6 module syntax everywhere because works in the browser and server, more recent and current, and helps tree shaking perform best
right now it's working with these choices:
-package.json includes "type": "module", keeping ES6 setting
-webpack.config.cjs ends .cjs not .js or .mjs, reverting to CommonJS setting
-serverless.yml custom.webpack.webpackConfig references the webpack config with that extension
-insde webpack.config.cjs, require, module.exports, and __dirname are all legacy Node that matches CommonJS
but also, there are two mentions of commonjs2, setting the output format, necessary for webpack to bundle for lambda's node environment

# lambda step 5: three horrible hacky workarounds

here are scripts in package.json:

  "scripts": {
(1) "www": "serverless s3sync"
(2) "deploy": "webpack && serverless deploy"
(3) "local": "serverless offline --config local.yml",

(1) sync the www bucket
serverless deploy should sync the www bucket
except it doesn't
so instead www calls s3sync directly

(2) pack and upload lambda functions
serverless deploy should run webpack and then upload the packed functions
except it like deletes them and then can't find them or something
so intead running webpack manually beforehand works
and npm run deploy does this in a single command that bundles two steps

(3) run lambda functions locally
serverless-offline can emulate api gateway and lambda locally
except somehow it can't find the named handler in the output bundle
so this hack uses a separate yml config that points at the source files
and that way, runs them fine

here are some paths related to all this:

on disk:
./src/hello1.js ~ source code file
./dist/hello1.js ~ bundled webpack output file

in settings in local.yml:
  handler: src/hello1.handler # Paths to src to run before webpack
in settings in serverless.yml:
  handler: dist/hello1.handler # Paths to dist to upload after webpack

in code in ./src/hello1.js:
  "... export const handler = async (event) => {..."
in code in ./dist/hello1.js:
  "...e.d(o,{handler:()=>t});const t=async..."

on the web:
  http://localhost:3000/prod/hello1 ~ path to function emulated locally
  https://api.net23.cc/hello1 ~ path to function deployed  

you've seen subfolders like src/handlers and dist/service appear, but for the moment at least, have managed to keep them away

so, this is working, but hacky as f**k with three workarounds, and you haven't even tested using a module or library code yet, ugh

# lambda step 6: switched to rollup

switched from webpack and babel to rollup, and everything works great
$ npm run local   is "local": "rollup -c && serverless offline",
$ npm run deploy  is "deploy": "rollup -c && serverless deploy",
and the serverless-webpack module is replaced with nothing

here is net23's package.json with rollup, looking at popularity and recency:

serverless                 1 million      1month
serverless-offline           536k         2months
serverless-domain-manager    198k         5months
serverless-s3-sync           31k          6months ~ a little too rare

rollup                        22 million  1month
@rollup/plugin-commonjs        3 million  1month
@rollup/plugin-node-resolve    6 million  9months
@rollup/plugin-terser          1 million  9months
@rollup/plugin-json            2 million  7months
rollup-plugin-node-polyfills     776k     5years ~ a little too old

# lambda step 7: great success

here's what we finished:
[x]hello lambda
[x]develop locally, using serverless framework's emulation of api gateway and lambda
[x]do some math big int style
[x]use a node module directly, nanoid probably
[x]import library code
[x]run all the tests

                                             _      
  __ _  ___ ___ ___  ___ ___    ___ ___   __| | ___ 
 / _` |/ __/ __/ _ \/ __/ __|  / __/ _ \ / _` |/ _ \
| (_| | (_| (_|  __/\__ \__ \ | (_| (_) | (_| |  __/
 \__,_|\___\___\___||___/___/  \___\___/ \__,_|\___|
                                                    

only cold3.cc should be able to call network 23 apis
in addition to cors and checking the origin header and so on,
the simplest way this is secured is with an api access key
this is just like how we access supabase and other third party apis
except here, we're coding both sides
here's an example:


when cold3 makes a request to net23, it includes this access key
cold3 gets the key from cloudflare secrets
net23 checks the key from lambda environment variables or aws secret manager or whatever

you need to store this secret a lot of places:
-env files for local development, both cold3 and net23
-cloudflare secrets
-lambda's equivalent of cloudflare secrets

.env:
ACCESS_NETWORK_23=VeryLongSecretCodeLikeDsqmB9YxbtseDuUHwyJnjDsqmB9YxbtseDuUHwyJnjAndSoOn

cloudflare:
cloudflare dashboard, workers and pages, cold3, settings tab, environment variables

serverless.yml:
provider:
  environment: # Name variables in .env file here so they are on process.env for the Lambda code
    ACCESS_NETWORK_23: ${env:ACCESS_NETWORK_23}

and then in lambda code like hello2.js:
	let access = 'not found'
	if (typeof process.env.ACCESS_NETWORK_23 == 'string') access = process.env.ACCESS_NETWORK_23.length

you don't have to mess with the aws dashboard, which is great

											_     _   _                  _             _   
 _ __ ___ _ __   ___ | |_  | |_| |__   ___   _ __ | | __ _ _ __ | |_ 
| '__/ _ \ '_ \ / _ \| __| | __| '_ \ / _ \ | '_ \| |/ _` | '_ \| __|
| | |  __/ |_) | (_) | |_  | |_| | | |  __/ | |_) | | (_| | | | | |_ 
|_|  \___| .__/ \___/ \__|  \__|_| |_|\___| | .__/|_|\__,_|_| |_|\__|
				 |_|                                |_|                      





quick repot1

$ npm create cloudflare@latest
repot1
website or web app
nuxt
yes git for version control
yes deploy to cloudflare
(quickly get the right chrome profile forward, and already signed in to cloudflare there!)
yeah it's up at
https://repot1.pages.dev/

$ npx nuxi add mypage
$ npx nuxi add mycomponent
$ npx nuxi add myapi










                    _            _       
 _ __ _   _ _ __   | |_ ___  ___| |_ ___ 
| '__| | | | '_ \  | __/ _ \/ __| __/ __|
| |  | |_| | | | | | ||  __/\__ \ |_\__ \
|_|   \__,_|_| |_|  \__\___||___/\__|___/
                                         

tiny tests, in library0.js, exports test(), ok(), and runTests()
all calls to test() are in the library
and, as much as possible, factor all *code* into the library as well!
pages, components, and api handlers should be really short

run tests in...

(1) Node 20
$ cd ./library
$ node test.js
test results are logged out

(2) Vite
$ cd ./icarus
$ npm run icarus
and then see test results on the home route

(3) Nuxt
$ cd ./
$ npm run local
and then see test results on the route /tests, TODO!

(and add more)
nuxt really is local/deployed x client/server--can you run tests in all four environments?
lambda serverless framework is local/deployed--run in those two environments













																				_            
 ___  ___ _ __ __ _ _ __    _ __   ___ | |_ ___  ___ 
/ __|/ __| '__/ _` | '_ \  | '_ \ / _ \| __/ _ \/ __|
\__ \ (__| | | (_| | |_) | | | | | (_) | ||  __/\__ \
|___/\___|_|  \__,_| .__/  |_| |_|\___/ \__\___||___/
									 |_|                               


(This page intentionally left blank.)




beyond aws services, another nice thing about net23 is that
if you do run into some node module or third party service
that you cannot get working in a cloudflare worker
then you just call out to a lambda at net23 which does it there
and you've got that capability at easy reach
without making every page load slow and expensive




2024aug30 turn off default email tracking pixel in sendgrid
https://app.sendgrid.com/settings/tracking
dashboard, settings, tracking
-Enabled; Open Tracking; An invisible image is being appended to HTML emails to track if they have been opened.
-Enabled; Click Tracking; Every link is being overwritten to track every click in emails.
-Disabled; Subscription Tracking; Allows every link to be overwritten to track every Subscription in emails.
-Disabled; Google Analytics Tracking; Allows tracking of your conversion rates and ROI with Google Analytics.
turned them all off








										 _                       
 _ __ ___   __ _  __| |_ __ ___   __ _ _ __  
| '__/ _ \ / _` |/ _` | '_ ` _ \ / _` | '_ \ 
| | | (_) | (_| | (_| | | | | | | (_| | |_) |
|_|  \___/ \__,_|\__,_|_| |_| |_|\__,_| .__/ 
																			|_|    

== high level

>milestone 1, done

domain name
ssl certificate

www bucket
www distribution
www upload

>milestone 2

api functions
only callable from https://cold3.cc
that use imports
and library code
and survived webpack tree shaking

>milestone 3

vhs bucket
vhs distribution
vhs lambda@edge un-get-round-able gatekeeper
so also only callable from cold3

>milestone 4

send an email
send a sms









