
Network 23 ~ "Beta to the Max!"

some notes building the megamedia empire:

== install aws cli

npm's aws-cli is deprecated as of 6 years ago
it seems most people install aws-cli with python
https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
amazon docs say for windows install that msi

$ aws --version
aws-cli/2.16.4 Python/3.11.8 Windows/10 exe/AMD64

== give aws cli access to your aws account

$ aws configure

AWS Access Key ID [None]: YOUR_ACCESS_KEY_ID
AWS Secret Access Key [None]: YOUR_SECRET_ACCESS_KEY
Default region name [None]: us-east-1
Default output format [None]: json

dashboards at aws.amazon.com
iam dashboard
click the number of users
create user
net23dev2, example name
attach policies directly
check AdministratorAccess, second one
create user

click new user
access key 1, create access key
use case, command line interface, check understand reccomendation, next
no description, create access key

secret access key only shows once, paste it right into bash

$ aws sts get-caller-identity
$ aws s3 ls

confirm you're in, and list your buckets

== install serverless framework

https://www.serverless.com/

$ npm install -g serverless
$ serverless --version

== setup repository on github

made repo on github with node defaults
$ git clone https://github.com/zootella/net23

$ cd net23
move aside .gitignore as serverless create will also make one
$ serverless create --template aws-nodejs --path .

$ npm init
$ npm install -S aws-sdk

amazon access is configured, but make .env to mirror non-amazon secrets the lambdas will use
$ touch .env
and make sure .gitignore lists it

== domain name

registered net23.cc at a third party registrar

aws web console, route53 dashboard, hosted zones, create hosted zone
net23.cc, domain name
public already selected, create hosted zone
leads to page for new hosted zone, titled net23.cc, with two records
the NS record shows the name servers amazon has picked for us:

ns-1619.awsdns-10.co.uk.
ns-1281.awsdns-32.org.
ns-682.awsdns-21.net.
ns-211.awsdns-26.com.

go back to the registrar to put those in
nameservers, basic dns, changing that to custom dns
entering the four name servers above, *without* the periods at the ends

dnspropegation happens pretty quick, then check with nslookup

$ nslookup net23.cc
$ nslookup net23.cc 8.8.8.8
$ nslookup -type=NS net23.cc

first two won't work yet because you haven't made any A records
the 8s uses google's dns to check, rather than whatever is local

== ssl certificate

acm, list certificates, request
request a public certificate
add another name to this certificate to get two boxes, then enter
net23.cc
*.net23.cc
defaults of dns validation, rsa2048, request

at this point you can get the ARN
and status is pending validation

there's a button create records in route53
follow that flow, it'll make a cname record
in route53 you can see it made the record
still pending, taking a few minutes, then issued, green check

then put the ARN in .env and run the script:

$ serverless deploy

== email

goals and steps:
[x]review how you setup email forwarding already in your personal cloudflare account
[x]setup forwarding so support@cold3.cc forwards to another domain
[x]configure noreply@cold3.cc to correctly bounce or kill email
[~]configure DKIM and SPF for maximum security and correctness
[]get a lambda at api.net23.cc to send email from noreply@cold3.cc on surface and deep in headers

cloudflare dashboard for previous example domain, where you setup pages and email forwarding
websites, example.com
back on the left, dns, records
seeing these records as a result of setting up pages and email forwarding:

AAAA   www          100::                                         Proxied
CNAME  example.com  example-com.pages.dev                         Proxied
MX     example.com  route3.mx.cloudflare.net                      DNS only
MX     example.com  route2.mx.cloudflare.net                      DNS only
MX     example.com  route1.mx.cloudflare.net                      DNS only
TXT    example.com  "v=spf1 include:_spf.mx.cloudflare.net ~all"  DNS only

back on the left, email
configuration summary, custom addresses, 2 dns records, routing status enabled, email dns records configured

cloudflare dashboard for cold3.cc, where so far you've setup pages and workers but no email yet
websites, cold3.cc
back on the left, dns, records
there are only two:

AAAA   www       100::            Proxied
CNAME  cold3.cc  cold3.pages.dev  Proxied

back on the left, email, just a link to this documentation:
https://developers.cloudflare.com/email-routing/
and a big blue get started button, clicking it

breadcrumbs are
1 Create a custom address
2 Verify destination address
3 Configure your DNS

you're goign to set these two up now:

k----@cold3.cc   -> ke---@efa--.ll-
support@cold3.cc -> support@efa--.ll-

on the first one, step 2 is they send you an email link
and step 3 is they show you the extra dns records they'll add
then to add the second forwarding address click
email, email routing, routing rules, custom addresses, create address

you see how you can create an alias that drops emails, and will set that up now, as well
cloudflare dashboard, cold3.cc, email, email routing, routing rules, custom addresses, create address
custom address, noreply@cold3.cc
action, Drop

now the routing rules tab has a table with the three custom addresses
you can turn them on and off individually there, too
also, going back to dns, records, you can see the original AAAA and CNAME records
and the new MX and TXT ones that configuring email routing created

(...next, you leave the cloudflare dashboard and head over to aws)

remember, you have setup your domain ef---.ll- at namecheap and squarespace
aws has never heard of it outside of the pinpoint verification you just completed
you have working email forwarding like support@ef---.ll-
the domain you've setup at aws, net23.cc, the user should never see, not even in headers
and considering all this, your goal:
"a lambda at api.net23.cc can send an email from noreply@ef---.ll-"
should be possible

you started down the breadcrumbs with cold3.cc, but then read this on step 2:
"By adding your domain to Amazon SES it also allows your recipients to know that the emails coming from you. For your initial domain, we recommend verifying a domain that loads a webpage with identifiable information about your organization."
so, you need to use ef---.ll- not cold3.cc

aws dashboard labyrinth, ses homepage, get started button

here are the breadcrumbs:
Step 1 Add your email address
Step 2 Add your sending domain
Step 3 - optional Add MAIL FROM domain
Step 4 Review and get started with SES

Step 1

Add your email address, To get started with Amazon SES you must provide an email address so that we can send you a verification link. This verification process shows us you're the owner of the email address., A verification email will be sent to you at this address.

support@ef---.ll-

Step 2

Add your sending domain; A domain identity usually matches your website or business name. Amazon SES needs to be linked to your domain and verified in order to send emails to your recipients through SES. By adding your domain to Amazon SES it also allows your recipients to know that the emails coming from you. For your initial domain, we recommend verifying a domain that loads a webpage with identifiable information about your organization; To verify ownership of a domain, you must have access to its DNS settings to add the necessary records.

ef---.ll-

Step 3

Add MAIL FROM domain - optional; Configuring a custom MAIL FROM domain for messages sent from this identity enables the MAIL FROM address to align with the From address. Domain alignment must be achieved in order to be DMARC compliant; The MAIL FROM domain refers to the domain that appears in the 'From' field of an email message and is recommended for better deliverability, reputation management, and branding purposes. The MAIL FROM domain must be a subdomain of the verified identity from which youâ€™re sending.

mail.ef---.ll-

Behavior on MX failure; Choose which action Amazon SES should take if your MAIL FROM domain's MX (Mail Exchange) record is not set up correctly

(x) Use default MAIL FROM domain; Will use a subdomain of amazonses.com instead of your custom MAIL FROM domain.
( ) Reject message; Will automatically reject the message without sending it.

Done

You are in Sandbox; In a sandbox environment, you can use all of the features offered by Amazon SES; however, certain sending limits and restrictions apply. When you're ready to move out of the sandbox, submit a request for production access. Before you submit a request for production access you must complete the tasks below.
[]Verify email address; To verify ownership of this email, check your inbox for a verification request email and click the link provided.
[]Send test email (Optional but recommended); Amazon SES mailbox simulator lets you test how your application handles different email sending scenarios.
[]Verify sending domain; Click on the button below and add the generated CNAME records to your domain's DNS provider.

Get DNS Records

there's a csv file to download with 3 CNAME, 2 TXT, and a MX record
going to namecheap to add them
already in namecheap are dns records for squarespace, and google workspace
















chatgpt suggested "mail" as the subdomain name
and explained there are four things i should configure here:
chat suggested dns records, as well, all of which are covered by amazon's instructions
SPF (Sender Policy Framework) Ensures AWS SES is authorized to send emails on behalf of your domain.
DKIM (DomainKeys Identified Mail) Adds email authentication to prevent spoofing.
DMARC (Domain-based Message Authentication, Reporting & Conformance) Helps manage and report on email authentication.
MAIL FROM Domain. Aligns the MAIL FROM domain with your From address for DMARC compliance and improved deliverability.






























== high level

>milestone 1, done

domain name
ssl certificate

www bucket
www distribution
www upload

>milestone 2

api functions
only callable from https://cold3.cc
that use imports
and library code
and survived webpack tree shaking

>milestone 3

vhs bucket
vhs distribution
vhs lambda@edge un-get-round-able gatekeeper
so also only callable from cold3

>milestone 4

send an email
send a sms









