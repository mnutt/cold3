
Network 23 ~ "Beta to the Max!"

some notes building the megamedia empire:

== install aws cli

npm's aws-cli is deprecated as of 6 years ago
it seems most people install aws-cli with python
https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
amazon docs say for windows install that msi

$ aws --version
aws-cli/2.16.4 Python/3.11.8 Windows/10 exe/AMD64

== give aws cli access to your aws account

$ aws configure

AWS Access Key ID [None]: YOUR_ACCESS_KEY_ID
AWS Secret Access Key [None]: YOUR_SECRET_ACCESS_KEY
Default region name [None]: us-east-1
Default output format [None]: json

dashboards at aws.amazon.com
iam dashboard
click the number of users
create user
net23dev2, example name
attach policies directly
check AdministratorAccess, second one
create user

click new user
access key 1, create access key
use case, command line interface, check understand reccomendation, next
no description, create access key

secret access key only shows once, paste it right into bash

$ aws sts get-caller-identity
$ aws s3 ls

confirm you're in, and list your buckets

== install serverless framework

https://www.serverless.com/

$ npm install -g serverless
$ serverless --version

== setup repository on github

made repo on github with node defaults
$ git clone https://github.com/zootella/net23

$ cd net23
move aside .gitignore as serverless create will also make one
$ serverless create --template aws-nodejs --path .

$ npm init
$ npm install -S aws-sdk

amazon access is configured, but make .env to mirror non-amazon secrets the lambdas will use
$ touch .env
and make sure .gitignore lists it

== domain name

registered net23.cc at a third party registrar

aws web console, route53 dashboard, hosted zones, create hosted zone
net23.cc, domain name
public already selected, create hosted zone
leads to page for new hosted zone, titled net23.cc, with two records
the NS record shows the name servers amazon has picked for us:

ns-1619.awsdns-10.co.uk.
ns-1281.awsdns-32.org.
ns-682.awsdns-21.net.
ns-211.awsdns-26.com.

go back to the registrar to put those in
nameservers, basic dns, changing that to custom dns
entering the four name servers above, *without* the periods at the ends

dnspropegation happens pretty quick, then check with nslookup

$ nslookup net23.cc
$ nslookup net23.cc 8.8.8.8
$ nslookup -type=NS net23.cc

first two won't work yet because you haven't made any A records
the 8s uses google's dns to check, rather than whatever is local

== ssl certificate

acm, list certificates, request
request a public certificate
add another name to this certificate to get two boxes, then enter
net23.cc
*.net23.cc
defaults of dns validation, rsa2048, request

at this point you can get the ARN
and status is pending validation

there's a button create records in route53
follow that flow, it'll make a cname record
in route53 you can see it made the record
still pending, taking a few minutes, then issued, green check

then put the ARN in .env and run the script:

$ serverless deploy










== high level

>milestone 1, done

domain name
ssl certificate

www bucket
www distribution
www upload

>milestone 2

api functions
only callable from https://cold3.cc
that use imports
and library code
and survived webpack tree shaking

>milestone 3

vhs bucket
vhs distribution
vhs lambda@edge un-get-round-able gatekeeper
so also only callable from cold3

>milestone 4

send an email
send a sms









