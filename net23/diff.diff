diff --git a/net23/net23.txt b/net23/net23.txt
index 776678a..517cc11 100644
--- a/net23/net23.txt
+++ b/net23/net23.txt
@@ -771,30 +771,24 @@ so that's way too much work and complexity for this that likely doesn't even mat
 
 # lambda step 4: let in webpack and babel to reduce bundle size and use modules
 
-
-
-
-ok, you put in webpack.config.js and .babelrc
-but haven't made any changes to serverless.yml yet
-you can still test them, maybe, with:
-
 $ npm run pack
-> net23@0.1.0 pack
-> webpack
-asset hello1.js 494 bytes [compared for emit] [minimized] (name: hello1)
-asset hello2.js 490 bytes [compared for emit] [minimized] (name: hello2)
-runtime modules 1.31 KiB 6 modules
-cacheable modules 310 bytes
-  ./src/handlers/hello1.js 157 bytes [built] [code generated]
-  ./src/handlers/hello2.js 153 bytes [built] [code generated]
-webpack 5.93.0 compiled successfully in 864 ms
-
-and it works! you've got dist/hello1.js and 2, and they're super compact
-this will also hopefully make the serverless deploy faster, as it's not bundling and uploading 14mb
-but that's for tomorrow
+$ npm run deploy
 
+pack just runs webpack, building to dist/hello1.js
+deploy does that as part of the serverless framework upload to aws lambda
+before adding webpack, each hello was 7.1 MB; now serverless framework says it's 157 bytes
+on disk from pack its 494 bytes, though, but whatever
 
+also, deploy seems to delete the dist folder? it's there after pack, gone after deploy, at least
 
+fought an error about ES6 module syntax or not in the webpack configuration
+generally, trying to pick ES6 module syntax everywhere because works in the browser and server, more recent and current, and helps tree shaking perform best
+right now it's working with these choices:
+-package.json includes "type": "module", keeping ES6 setting
+-webpack.config.cjs ends .cjs not .js or .mjs, reverting to CommonJS setting
+-serverless.yml custom.webpack.webpackConfig references the webpack config with that extension
+-insde webpack.config.cjs, require, module.exports, and __dirname are all legacy Node that matches CommonJS
+but also, there are two mentions of commonjs2, setting the output format, necessary for webpack to bundle for lambda's node environment
 
 
 
@@ -803,20 +797,13 @@ but that's for tomorrow
 
 
 (bookmark)
-when you deploy, output is like this:
-functions:
-  hello1: net23-prod-hello1 (7.1 MB)
-  hello2: net23-prod-hello2 (7.1 MB)
-7mb for hello world!
-huge because it's taking all of the node_modules folder, essentially
-[]watch it go down when you add webpack and babel
-
-
-
-
-
-
-
+you've got lambda saying hello
+and getting bundled with webpack
+next to do here:
+[]develop locally, using serverless framework's emulation of api gateway and lambda
+[]use a node module, nanoid probably
+[]use library code
+[]run all the tests
 
 
 
diff --git a/net23/serverless.yml b/net23/serverless.yml
index 03ae000..34e27ea 100644
--- a/net23/serverless.yml
+++ b/net23/serverless.yml
@@ -5,6 +5,7 @@ plugins:
   - serverless-s3-sync # Upload static site files from www with $ npm run sync
   - serverless-offline # Emulates Lambda and API Gateway for local development
   - serverless-domain-manager # Use our domain for API Gateway and Lambda
+  - serverless-webpack # Bundle code as small as possible for Lambda
 
 provider:
   name: aws
@@ -12,24 +13,16 @@ provider:
   region: us-east-1 # Lambda@Edge requires North Virginia
   stage: prod # Production by default, as this script includes resources like buckets
 
-# #### FOR API FUNCTIONS ####
-package: #soon, we'll be using babel and webpack, and this section goes away, pretty sure, TODO
-  exclude:
-    - node_modules/**
-    - dist/**
-    - .babelrc
-    - webpack.config.js
-
 # #### FOR API FUNCTIONS ####
 functions:
   hello1:
-    handler: src/handlers/hello1.handler
+    handler: dist/hello1.handler
     events:
       - http:
           path: hello1
           method: get
   hello2:
-    handler: src/handlers/hello2.handler
+    handler: dist/hello2.handler
     events:
       - http:
           path: hello2
@@ -158,3 +151,8 @@ custom:
     endpointType: 'regional'
     securityPolicy: 'tls_1_2'
     certificateArn: ${env:ACCESS_CERTIFICATE_ARN}
+
+  # #### FOR API FUNCTIONS ####
+  webpack: # Settings for serverless-webpack to bundle code for Lambda using webpack and babel
+    webpackConfig: './webpack.config.cjs' # .cjs because errors unless uses require all Node-style
+    includeModules: true
diff --git a/net23/src/handlers/hello1.js b/net23/src/handlers/hello1.js
index aa235e0..b828a36 100644
--- a/net23/src/handlers/hello1.js
+++ b/net23/src/handlers/hello1.js
@@ -3,7 +3,7 @@ export const handler = async (event) => {
 	return {
 		statusCode: 200,
 		body: JSON.stringify({
-			message: 'hello1, version 2024jul15a',
+			message: 'hello1, version 2024jul15e',
 		}),
 	}
 }
diff --git a/net23/webpack.config.js b/net23/webpack.config.js
deleted file mode 100644
index 55db6d1..0000000
--- a/net23/webpack.config.js
+++ /dev/null
@@ -1,43 +0,0 @@
-
-import path from 'path'
-
-export default {
-	entry: {
-		hello1: './src/handlers/hello1.js',
-		hello2: './src/handlers/hello2.js'
-	},
-	target: 'node20',
-	mode: 'production',
-	output: {
-		libraryTarget: 'commonjs2',
-		path: path.resolve('dist'),
-		filename: '[name].js',
-	},
-	module: {
-		rules: [
-			{
-				test: /\.js$/, // Apply this rule to all .js files
-				exclude: /node_modules/, // Don't transpile files in the node_modules directory, they're already ready
-				use: {
-					loader: 'babel-loader', // Use Babel to transpile the files
-					options: {
-						presets: [ // Specify these Babel presets to use
-							['@babel/preset-env', {
-								targets: {
-									node: '20'
-								},
-								modules: false, // Don't transform to modules, Node 20 already supports them; this lets Webpack do tree shaking
-							}]
-						],
-					},
-				},
-			},
-		],
-	},
-	externals: {
-		'aws-sdk': 'commonjs2 aws-sdk', // The AWS SDK is available in the Lambda runtime, so exclude it from the bundle, and treat it as an external dependency in CommonJS2 format
-	},
-	optimization: {
-		minimize: true, // Have Terser remove whitespace, comments, and newline characters, and shorten variable names; off by default
-	}
-}
